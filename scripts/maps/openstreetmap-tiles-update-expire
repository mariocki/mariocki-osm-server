#!/bin/bash

set -e

#------------------------------------------------------------------------------
# AJT - change directory to mod_tile directory so that we can run replag
# and other things directly from this script when run from cron.
# Change the actual location to wherever installed locally.
#------------------------------------------------------------------------------
export PATH=.:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ACCOUNT=renderer

#------------------------------------------------------------------------------
# Extra OSM2PGSQL_OPTIONS may need setting if a tag transform script is
# in use.  See https://github.com/SomeoneElseOSM/SomeoneElse-style and
# http://wiki.openstreetmap.org/wiki/User:SomeoneElse/Ubuntu_1404_tileserver_load
# The database name always needs setting.
#------------------------------------------------------------------------------
OSMOSIS_BIN=osmosis
OSM2PGSQL_BIN=osm2pgsql
TRIM_BIN=trim_osc.py

OSM2PGSQL_OPTIONS="-d ${POSTGRES_DB} -H ${PGHOST} -U ${POSTGRES_USER} -G --hstore --tag-transform-script /openstreetmap-carto/openstreetmap-carto.lua --number-processes ${THREADS:-4} -S /openstreetmap-carto/openstreetmap-carto.style ${OSM2PGSQL_EXTRA_ARGS}"

#------------------------------------------------------------------------------
# When using trim_osc.py we can define either a bounding box (such as this
# example for England and Wales) or a polygon.
# See https://github.com/zverik/regional .
# This area will usually correspond to the data originally loaded.
#------------------------------------------------------------------------------
TRIM_POLY_FILE="/var/lib/mod_tile/data.poly"
TRIM_OPTIONS="-d ${POSTGRES_DB} --host ${PGHOST}"
TRIM_REGION_OPTIONS="-p $TRIM_POLY_FILE"

BASE_DIR=/var/lib/mod_tile
LOG_DIR=/var/log/tiles/
WORKOSM_DIR=$BASE_DIR/.osmosis

LOCK_FILE=/tmp/openstreetmap-update-expire-lock.txt
CHANGE_FILE=$BASE_DIR/changes.osc.gz
EXPIRY_FILE=$BASE_DIR/dirty_tiles
STOP_FILE=$BASE_DIR/stop.txt

OSMOSISLOG=$LOG_DIR/osmosis.log
OSM2PGSQLLOG=$LOG_DIR/osm2pgsql.log
EXPIRYLOG=$LOG_DIR/expiry.log
RUNLOG=$LOG_DIR/run.log

#------------------------------------------------------------------------------
# The tile expiry section below can re-render, delete or dirty expired tiles.
# By default, tiles between EXPIRY_MINZOOM and EXPIRY_MAXZOOM are rerendered.
# "render_expired" can optionally delete (and/or dirty) tiles above a certail
# threshold rather than rendering them.
#------------------------------------------------------------------------------
EXPIRY_MINZOOM=13
EXPIRY_TOUCHFROM=14
EXPIRY_DELETEFROM=17
EXPIRY_MAXZOOM=20

#*************************************************************************
#*************************************************************************

m_info() {
    echo "[$(date +"%Y-%m-%d %H:%M:%S")] $$ $1" | tee -a "$RUNLOG" | logger
}

m_error() {
    echo "[$(date +"%Y-%m-%d %H:%M:%S")] $$ [error] $1" | tee -a "$RUNLOG" | logger

    m_info "resetting state"
    /bin/cp $WORKOSM_DIR/last.state.txt $WORKOSM_DIR/state.txt || true

    rm -f "$CHANGE_FILE" || true
    rm -f "$EXPIRY_FILE.$$" || true
    rm -f "$LOCK_FILE" || true
    exit
}

m_ok() {
    echo "[$(date +"%Y-%m-%d %H:%M:%S")] $$ $1" | tee -a "$RUNLOG" | logger
}

getlock() {
    if [ -s $1 ]; then
        if [ "$(ps -p $(cat $1) | wc -l)" -gt 1 ]; then
            return 1 #false
        fi
    fi

    echo $$ >"$1"
    return 0 #true
}

freelock() {
    rm "$1"
    rm "$CHANGE_FILE"
}

if [ $# -eq 1 ]; then
    m_info "Initialising Osmosis replication system to $1"
    mkdir -p $WORKOSM_DIR
    $OSMOSIS_BIN --read-replication-interval-init workingDirectory=$WORKOSM_DIR 2>&1 | tee -a "$OSMOSISLOG" | logger
    wget "https://replicate-sequences.osm.mazdermind.de/?"$1"T00:00:00Z" -O $WORKOSM_DIR/state.txt
    mv $WORKOSM_DIR/configuration.txt $WORKOSM_DIR/configuration_orig.txt
    sed "s!baseUrl=http://planet.openstreetmap.org/replication/minute!baseUrl=https://planet.openstreetmap.org/replication/minute!" $WORKOSM_DIR/configuration_orig.txt >$WORKOSM_DIR/configuration.txt
else
    # make sure the lockfile is removed when we exit and then claim it

    if ! getlock "$LOCK_FILE"; then
        m_info "pid $(cat $LOCK_FILE) still running"
        exit 3
    fi

    if [ -e $STOP_FILE ]; then
        m_info "stopped"
        exit 2
    fi

    # -----------------------------------------------------------------------------
    # Add disk space check from https://github.com/zverik/regional
    # -----------------------------------------------------------------------------
    MIN_DISK_SPACE_MB=500

    if $(python -c "import os, sys; st=os.statvfs('$BASE_DIR'); sys.exit(1 if st.f_bavail*st.f_frsize/1024/1024 > $MIN_DISK_SPACE_MB else 0)"); then
        m_info "there is less than $MIN_DISK_SPACE_MB MB left"
        exit 4
    fi

    seq=$(cat $WORKOSM_DIR/state.txt | grep sequenceNumber | cut -d= -f2)
    old_state_date=$(cat $WORKOSM_DIR/state.txt |grep timestamp|cut -b11-31| sed 's/\\//g'| sed 's/T/_/')

    m_ok "start import from date $old_state_date seq-nr $seq, replag is $(osmosis-db_replag -h)"

    /bin/cp $WORKOSM_DIR/state.txt $WORKOSM_DIR/last.state.txt
    m_ok "downloading diff"

    # update OSM database
    if ! $OSMOSIS_BIN --rri workingDirectory="${WORKOSM_DIR}" --wdc host="${PGHOST}" database="${OSM_DB}" user="${OSM_USER}" validateSchemaVersion="no" 2>&1 | tee -a "$OSMOSISLOG" | logger; then
        m_error "Osmosis error"
    fi

    # extract changes from openstreetmap db
    if ! $OSMOSIS_BIN --rdc host="${PGHOST}" database="${OSM_DB}" user="${OSM_USER}" intervalBegin="${old_state_date}" validateSchemaVersion="no" --simplify-change --write-xml-change $CHANGE_FILE 2>&1 | tee -a "$OSMOSISLOG" | logger; then
        m_error "Osmosis error"
    fi

    m_ok "importing diff"
    if ! $OSM2PGSQL_BIN -a --slim $OSM2PGSQL_OPTIONS $CHANGE_FILE 2>&1 | tee -a "$OSM2PGSQLLOG" | logger; then
        m_error "osm2pgsql error"
    fi

    psql -h ${PGHOST} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c 'CALL update_rail_routes();'

    #------------------------------------------------------------------------------
    # Only remove the lock file after expiry (if system is slow we want to delay
    # the next import, not have multiple render_expired processes running)
    #------------------------------------------------------------------------------
    freelock "$LOCK_FILE"

    m_ok "Done with import"

fi
